{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","showLoginForm","setShowLoginForm","JSON","parse","localStorage","getItem","loginData","setLoginData","modalData","setModalData","formData","setFormData","userData","setUserData","useEffect","loadUserData","auth","a","axios","res","errors","data","localStorageObject","clentName","lname","fname","clentId","id","setItem","stringify","console","log","url","window","location","href","split","length","substring","handleClose","className","Modal","show","onHide","size","enforceFocus","autoFocus","aria-labelledby","centered","onEscapeKeyDown","animation","Header","closeButton","Title","title","Body","text","Footer","Button","variant","onClick","Navbar","bg","Brand","Toggle","Collapse","Text","nextUrl","replace","src","alt","type","name","onChange","event","target","value","email","placeholder","error","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f6b4fd41.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Button, Modal, Navbar } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nconst localStorageKey = \"formDataInLocalStorage\";\n\nfunction App() {\n  const [showLoginForm, setShowLoginForm] = useState(false);\n  const [loginData, setLoginData] = useState(\n    JSON.parse(localStorage.getItem(localStorageKey))\n  );\n\n  const [modalData, setModalData] = useState(null);\n\n  const [formData, setFormData] = useState(null);\n  const [userData, setUserData] = useState(null);\n\n  useEffect(() => {\n    async function loadUserData(auth) {\n      try {\n        const res = await axios(\n          `https://spgapps.tk/exec/userData/auth=${auth}`\n        );\n        if (!res.errors) {\n          res.data.data.auth = auth;\n\n          let localStorageObject = {};\n          localStorageObject.auth = res.data.data.auth;\n          localStorageObject.clentName =\n            res.data.data[0].lname + \" \" + res.data.data[0]?.fname;\n          localStorageObject.clentId = res.data.data[0].id;\n\n          localStorage.setItem(\n            localStorageKey,\n            JSON.stringify(localStorageObject)\n          );\n          setLoginData(localStorageObject);\n          setUserData(res.data.data);\n        } else {\n        }\n      } catch (error) {}\n    }\n    console.log(\"useEffect\", loginData, userData);\n    if (!loginData) {\n      const url = window.location.href.split(\"/\");\n      var auth;\n\n      if (\n        url.length > 2 &&\n        url[url.length - 2] === \"app\" &&\n        url[url.length - 1] !== \"\"\n      ) {\n        auth = url[url.length - 1].substring(1);\n      } else {\n        setShowLoginForm(true);\n      }\n      if (auth && !userData) loadUserData(auth);\n    } else {\n      if (loginData.auth && !userData) loadUserData(loginData.auth);\n    }\n  }, [loginData, userData]);\n\n  const handleClose = () => setModalData(null);\n\n  function handleChange(event) {\n    console.log(event.target.name, event.target.value);\n    setFormData({ ...formData, email: event.target.value });\n  }\n\n  return (\n    <div className=\"container h-100\">\n      {modalData && (\n        <Modal\n          show={modalData}\n          onHide={handleClose}\n          size=\"md\"\n          enforceFocus={false}\n          autoFocus\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          centered\n          onEscapeKeyDown={handleClose}\n          animation={false}\n        >\n          <Modal.Header closeButton>\n            <Modal.Title id=\"contained-modal-title-vcenter\">\n              {modalData.title}\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>{modalData.text}</Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={handleClose}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      )}\n\n      {loginData && loginData.auth && (\n        <div>\n          <Navbar bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"http://www.levelupfitnesscenter.gr\">\n              Level UP Fitness Center\n            </Navbar.Brand>\n            <Navbar.Toggle />\n            <Navbar.Collapse className=\"justify-content-end\">\n              <Navbar.Text>\n                <a href=\"#login\">{loginData.clentName}</a>\n                <Button\n                  size=\"sm\"\n                  onClick={() => {\n                    let nextUrl = window.location.href.replace(\n                      \"/?\" + loginData.auth,\n                      \"\"\n                    );\n                    if (window.location.href !== nextUrl)\n                      window.location = nextUrl;\n                    setLoginData(null);\n                    setUserData(null);\n\n                    localStorage.setItem(localStorageKey, null);\n                  }}\n                >\n                  Αποσύνδεση\n                </Button>\n              </Navbar.Text>\n            </Navbar.Collapse>\n          </Navbar>\n        </div>\n      )}\n\n      {showLoginForm && (\n        <div className=\"d-flex justify-content-center h-100\">\n          <div className=\"user_card\">\n            <div className=\"d-flex justify-content-center\">\n              <div className=\"brand_logo_container\">\n                <img\n                  src=\"./images/logo.png\"\n                  className=\"brand_logo\"\n                  alt=\"Logo\"\n                />\n              </div>\n            </div>\n            <div className=\"d-flex justify-content-center  form_container\">\n              <form>\n                <div className=\"input-group mb-3\">\n                  <div className=\"input-group-append\">\n                    <span className=\"input-group-text\">\n                      <i className=\"fas fa-envelope\"></i>\n                    </span>\n                  </div>\n                  <input\n                    type=\"text\"\n                    name=\"email\"\n                    className=\"form-control input_email\"\n                    onChange={handleChange}\n                    value={formData ? formData.email : \"\"}\n                    placeholder=\"email\"\n                  />\n                </div>\n                {/* <div className=\"input-group mb-2\">\n                <div className=\"input-group-append\">\n                  <span className=\"input-group-text\">\n                    <i className=\"fas fa-key\"></i>\n                  </span>\n                </div>\n                <input\n                  type=\"password\"\n                  name=\"\"\n                  className=\"form-control input_pass\"\n                  value=\"\"\n                  placeholder=\"password\"\n                />\n              </div>\n              <div className=\"form-group\">\n                <div className=\"custom-control custom-checkbox\">\n                  <input\n                    type=\"checkbox\"\n                    className=\"custom-control-input\"\n                    id=\"customControlInline\"\n                  />\n                  <label class=\"custom-control-label\" for=\"customControlInline\">\n                    Remember me\n                  </label>\n                </div>\n              </div> */}\n                <div className=\"d-flex justify-content-center mt-3 login_container\">\n                  <Button\n                    type=\"button\"\n                    name=\"button\"\n                    variant=\"primary\"\n                    className=\"btn login_btn\"\n                    onClick={async () => {\n                      if (formData) {\n                        let res = await axios(\n                          `https://spgapps.tk/x/b569b1afd005e5e1c843a89139d46d0527d44bd49f44a1d5242b791bd27d4faa/email=${formData.email}`\n                        );\n                        var data = res.data;\n\n                        if (data.errors) {\n                          setModalData({ title: \"Πρόβλημα\", text: data.error });\n                        } else {\n                          data = data.data;\n                          setModalData(data);\n                        }\n                      }\n                    }}\n                  >\n                    Αποστολή\n                  </Button>\n                </div>\n              </form>\n            </div>\n\n            <div className=\"mt-4\">\n              <div className=\"d-flex justify-content-center links\">\n                Don't have an account?{\" \"}\n                <a href=\".\" className=\"ml-2\">\n                  Sign Up\n                </a>\n              </div>\n              <div className=\"d-flex justify-content-center links\">\n                <a href=\".\">Forgot your password?</a>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}